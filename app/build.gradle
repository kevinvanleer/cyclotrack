apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.gms.google-services'

import org.ajoberstar.grgit.Grgit

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        Default {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyPassword keystoreProperties['keyPassword']
            keyAlias keystoreProperties['keyAlias']
        }
        debug {
            storeFile file("/Users/kvl/.android/debug.keystore")
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.kvl.cyclotrack"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 43
        versionName "Bluetooth updates"

        def noWipBranches = ["main", "master", "dev", "release/*"]
        def lastCommitHash = { ->
            def git = Grgit.open(dir: project.rootDir)
            def lastHash = git.head().getAbbreviatedId()
            println("INFO: Last Git Hash $lastHash")
            return lastHash
        }
        def makeWipCommit = { ->
            def git = Grgit.open(dir: project.rootDir)
            if (git.status().unstaged.getAllChanges().size() > 0 || git.status().staged.getAllChanges().size() > 0)
                if (noWipBranches.contains(git.branch.current().name)) {
                    throw StopExecutionException("You are on a protected branch, either commit the changes or checkout a feature/bug branch")
                } else git.commit(all: true, message: 'wip')
        }
        def currentBranch = { ->
            def git = Grgit.open(dir: project.rootDir)
            return git.branch.current()
        }
        if (!noWipBranches.contains(currentBranch().name)) {
            makeWipCommit()
        }
        def gitHash = lastCommitHash()
        buildConfigField "String", "GIT_HASH", "\"$gitHash\""

        testInstrumentationRunner "com.kvl.cyclotrack.CustomTestRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
                arg("room.incremental", "true")
                arg("room.expandProjection", "true")
            }
        }

        def secureProps = new Properties()
        if (file("../secure.properties").exists()) {
            file("../secure.properties")?.withInputStream { secureProps.load(it) }
        }
        resValue "string", "maps_api_key", (secureProps.getProperty("MAPS_API_KEY") ?: "")
    }

    buildFeatures {
        dataBinding true
    }

    configurations.all {
        resolutionStrategy {
            force 'androidx.test:monitor:1.4.0'
        }
    }
    
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.Default
            debuggable true
        }
        debug {
            applicationIdSuffix '.debug'
            useLibrary 'android.test.mock'
        }
        dev {
            debuggable true
            applicationIdSuffix '.dev'
            signingConfig signingConfigs.debug
        }
        prod {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.Default
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
        }
        animationsDisabled = true
    }
    namespace 'com.kvl.cyclotrack'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.dhatim:fastexcel:0.12.7"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation 'org.greenrobot:eventbus:3.2.0'

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    androidTestImplementation "androidx.work:work-testing:$work_version"

    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation("com.google.android.gms:play-services-fitness:21.0.1")
    implementation("com.google.android.gms:play-services-auth:20.2.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.1")

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - Test helpers
    //testImplementation "androidx.room:room-testing:$room_version"

    implementation 'com.google.dagger:dagger:2.40.1'
    kapt 'com.google.dagger:dagger-compiler:2.40.1'

    implementation "com.google.dagger:hilt-android:$dagger_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_version"

    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'com.google.code.gson:gson:2.9.0'

    implementation platform('com.google.firebase:firebase-bom:28.4.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'

    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation group: "androidx.test", name: "rules", version: "$androidx_test"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // For instrumented tests.
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.35'
    // ...with Kotlin.
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.40.1'

    androidTestImplementation 'org.mockito:mockito-android:3.7.7'

    testImplementation 'junit:junit:4.13.1',
            "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2",
            "androidx.arch.core:core-testing:2.1.0",
            'org.mockito:mockito-core:3.7.7',
            'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0',
            "org.powermock:powermock-core:$powermock_version",
            "org.powermock:powermock-module-junit4:$powermock_version",
            "org.powermock:powermock-api-mockito2:$powermock_version",
            "com.opencsv:opencsv:4.6"
}