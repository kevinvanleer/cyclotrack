import org.ajoberstar.grgit.Grgit

plugins {
    id 'com.android.application'
    id 'com.google.dagger.hilt.android'
    id "com.google.devtools.ksp"
    id "kotlin-android"
    id "androidx.room"
    id "androidx.navigation.safeargs.kotlin"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    id "kotlin-kapt" // this is here for databinding support only
}

def homePath = System.properties["user.home"]
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

kotlin {
    jvmToolchain(17)
}

ksp {
    arg("room.incremental", "true")
    arg("room.expandProjection", "true")
}

android {
    room {
        schemaDirectory "$projectDir/schemas"
    }
    signingConfigs {
        Default {
            storeFile rootProject.file(keystoreProperties["storeFile"])
            storePassword keystoreProperties["storePassword"]
            keyPassword keystoreProperties["keyPassword"]
            keyAlias keystoreProperties["keyAlias"]
        }
        debug {
            storeFile file(homePath + "/.android/debug.keystore")
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }
    compileSdk 36

    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        applicationId "com.kvl.cyclotrack"
        minSdkVersion 26
        targetSdkVersion 36
        versionCode 65
        versionName "Google sign-in bugfix"

        def noWipBranches = ["main", "master", "dev", "release/*"]
        def lastCommitHash = { ->
            def git = Grgit.open(dir: project.rootDir)
            def lastHash = git.head().getAbbreviatedId()
            println("INFO: Last Git Hash $lastHash")
            return lastHash
        }
        def makeWipCommit = { ->
            def git = Grgit.open(dir: project.rootDir)
            if (git.status().unstaged.getAllChanges().size() > 0 || git.status().staged.getAllChanges().size() > 0)
                if (noWipBranches.contains(git.branch.current().name)) {
                    throw StopExecutionException("You are on a protected branch, either commit the changes or checkout a feature/bug branch")
                } else git.commit(all: true, message: "wip")
        }
        def currentBranch = { ->
            def git = Grgit.open(dir: project.rootDir)
            return git.branch.current()
        }
        if (!noWipBranches.contains(currentBranch().name)) {
            //makeWipCommit()
        }
        def gitHash = lastCommitHash()
        buildConfigField "String", "GIT_HASH", "\"$gitHash\""

        testInstrumentationRunner "com.kvl.cyclotrack.CustomTestRunner"

        def secureProps = new Properties()
        if (file("../secure.properties").exists()) {
            file("../secure.properties")?.withInputStream { secureProps.load(it) }
        }
        def openMapsVariantApiKey = secureProps.getProperty("OPENWEATHER_DEV") ?: ""
        applicationVariants.configureEach { variant ->
            if (variant.buildType.name == "release" || variant.buildType.name == "prod") {
                openMapsVariantApiKey = secureProps.getProperty("OPENWEATHER_PROD") ?: ""
            }
        }
        resValue "string", "maps_api_key", (secureProps.getProperty("MAPS_API_KEY") ?: "")
        resValue "string", "openweather_api_key", (openMapsVariantApiKey)
        resValue "string", "strava_client_id", (secureProps.getProperty("STRAVA_CLIENT_ID") ?: "")
        resValue "string", "strava_client_secret", (secureProps.getProperty("STRAVA_CLIENT_SECRET") ?: "")
    }

    buildFeatures {
        dataBinding true
        buildConfig true
    }

    dataBinding {
        addKtx = true
    }

    configurations.configureEach {
        resolutionStrategy {
            force "androidx.test:monitor:1.6.0"
        }
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.Default
            debuggable true
        }
        debug {
            applicationIdSuffix ".debug"
            useLibrary "android.test.mock"
        }
        dev {
            debuggable true
            applicationIdSuffix ".dev"
            signingConfig signingConfigs.debug
        }
        prod {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.Default
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
        }
        animationsDisabled = true
    }
    namespace "com.kvl.cyclotrack"
}

dependencies {
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.core:core-ktx:1.16.0" // DO NOT UPDATE UNTIL compileSdk 35
    implementation "androidx.appcompat:appcompat:1.7.1"
    implementation "com.google.android.material:material:1.12.0"
    implementation "androidx.constraintlayout:constraintlayout:2.2.1"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.dhatim:fastexcel:0.19.0"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "org.greenrobot:eventbus:3.3.1"

    // WorkManager
    // DO NOT UPDATE UNTIL compileSdk 35
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation "androidx.hilt:hilt-work:1.2.0"
    implementation files("libs/fit-21.84.00.jar")
    androidTestImplementation "androidx.work:work-testing:$work_version"

    implementation "com.google.android.gms:play-services-maps:19.2.0"
    implementation("com.google.android.gms:play-services-fitness:21.2.0")
    implementation "com.google.android.gms:play-services-location:21.3.0"
    implementation("com.google.android.gms:play-services-auth:21.3.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.10.2")

    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    ksp "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.google.dagger:hilt-android:$dagger_version"
    ksp "com.google.dagger:hilt-android-compiler:$dagger_version"

    ksp "androidx.hilt:hilt-compiler:1.2.0"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2"

    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation "com.google.code.gson:gson:2.13.1"

    // requires kotlin plugin update
    implementation platform("com.google.firebase:firebase-bom:33.16.0")
    implementation "com.google.firebase:firebase-crashlytics"
    implementation "com.google.firebase:firebase-analytics"

    implementation platform("com.squareup.okhttp3:okhttp-bom:5.0.0")
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"


    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    androidTestImplementation "androidx.test.ext:junit:1.2.1"
    androidTestImplementation group: "androidx.test", name: "rules", version: "$androidx_test"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"

    // For instrumented tests.
    androidTestImplementation "com.google.dagger:hilt-android-testing:2.56.2"
    // ...with Kotlin.
    kspAndroidTest "com.google.dagger:hilt-android-compiler:$dagger_version"

    androidTestImplementation "org.mockito:mockito-android:5.18.0"
    androidTestImplementation "androidx.test:monitor:1.7.2"
    androidTestImplementation "com.opencsv:opencsv:5.11.2"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation "org.powermock:powermock-core:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation "com.opencsv:opencsv:5.11.2"
    testImplementation "org.hamcrest:hamcrest-library:3.0"

}
